name: terraform-ci

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

permissions:
  id-token: write   # 关键：允许工作流通过 OIDC 换取临时凭证
  contents: read

env:
  TF_INPUT: "false"
  TF_IN_AUTOMATION: "1"
  AWS_REGION: us-east-1

jobs:
  pr_plan:
    name: PR fmt/validate/plan (OIDC)
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2   # 与你本地一致，避免版本差异

      # ---------- 质量 / 安全 ----------
      - name: Install TFLint
        run: |
          curl -sSL https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh \
            | bash -s -- -b /usr/local/bin
          tflint --init

      - name: Run TFLint (warnings not failing)
        shell: bash
        run: |
          set +e
          tflint -f compact
          code=$?
          # 0=ok, 2=warnings => 不阻塞 PR
          if [ $code -eq 0 ] || [ $code -eq 2 ]; then exit 0; else exit $code; fi

      - name: Install tfsec (binary)
        shell: bash
        run: |
          set -euo pipefail
          os="$(uname -s | tr '[:upper:]' '[:lower:]')"   # linux
          arch="$(dpkg --print-architecture)"             # amd64 / arm64
          sudo curl -fsSL \
            "https://github.com/aquasecurity/tfsec/releases/download/v1.28.14/tfsec-${os}-${arch}" \
            -o /usr/local/bin/tfsec
          sudo chmod +x /usr/local/bin/tfsec
          tfsec --version

      - name: Run tfsec (fail on HIGH)
        run: tfsec --no-color --minimum-severity HIGH .





      - name: Configure AWS via OIDC (plan)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::160885250897:role/gha-oidc-tf-plan
          aws-region: us-east-1

      - name: Terraform fmt & validate (no backend)
        run: |
          terraform fmt -check -recursive
          terraform init -backend-config=backend.hcl
          terraform validate

      - name: Terraform plan (dev, no lock, exitcode-aware)
        shell: bash
        run: |
          set +e
          terraform plan \
            -lock=false \
            -var-file=envs/dev.tfvars \
            -detailed-exitcode \
            -no-color
          code=$?
          echo "Terraform exit code: $code"
          # 1 = 真错误 -> 失败;0 或 2 = 允许通过
          if [ $code -eq 1 ]; then
            exit 1
          else
            exit 0
          fi


  main_pipeline:
    name: Main init + plan (OIDC)
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      - name: Configure AWS via OIDC (apply)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::160885250897:role/gha-oidc-tf-apply
          aws-region: us-east-1

      - name: Terraform init (backend)
        run: terraform init -backend-config=backend.hcl

      - name: Terraform plan (dev)
        run: terraform plan -var-file=envs/dev.tfvars

    # 稳定后解开自动部署（可选）
    # - name: Terraform apply (dev)
    # run: terraform apply -auto-approve -var-file=envs/dev.tfvars
