name: terraform-ci

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

env:
  TF_INPUT: "false"
  TF_IN_AUTOMATION: "1"
  AWS_REGION: us-east-1

concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: true

jobs:
  pr_plan:
    name: PR fmt/validate/plan (read-only via OIDC)
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      # ---------- 质量 / 安全 ----------
      - name: Install TFLint
        run: |
          curl -sSL https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh \
            | bash -s -- -b /usr/local/bin
          tflint --init

      - name: Run TFLint (warnings not failing)
        shell: bash
        run: |
          set +e
          tflint -f compact
          code=$?
          if [ $code -eq 0 ] || [ $code -eq 2 ]; then exit 0; else exit $code; fi

      - name: Install tfsec
        shell: bash
        run: |
          set -euo pipefail
          os="$(uname -s | tr '[:upper:]' '[:lower:]')"
          arch="$(dpkg --print-architecture)"
          sudo curl -fsSL "https://github.com/aquasecurity/tfsec/releases/download/v1.28.14/tfsec-${os}-${arch}" \
            -o /usr/local/bin/tfsec
          sudo chmod +x /usr/local/bin/tfsec
          tfsec --version

      - name: Run tfsec (fail on HIGH)
        run: tfsec --no-color --minimum-severity HIGH --soft-fail .


      # ---------- OIDC（PR只读） ----------
      - name: Configure AWS via OIDC (plan)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GHA_PLAN_ROLE_ARN }}   # ← 建议改用 Secret
          aws-region: us-east-1

      - name: Who am I (AWS)
        run: aws sts get-caller-identity

      - name: S3 state sanity check
        run: |
          aws s3api head-bucket --bucket my-terraform-state-daqula || true
          aws s3api head-object --bucket my-terraform-state-daqula --key dev/terraform.tfstate || true

      # ---------- Terraform（envs/dev） ----------
      - name: Terraform Init (envs/dev)
        run: terraform -chdir=envs/dev init -input=false

      - name: Terraform Fmt
        run: terraform -chdir=envs/dev fmt -check -recursive

      - name: Terraform Validate
        run: terraform -chdir=envs/dev validate

      - name: Terraform Plan (no lock, exitcode-aware)
        id: tfplan
        shell: bash
        env:
          TF_INPUT: "false"
          TF_IN_AUTOMATION: "1"
        run: |
          set +e
          mkdir -p /tmp/tflogs
          terraform -chdir=envs/dev plan \
            -lock=false \
            -var-file=dev.tfvars \
            -detailed-exitcode \
            -no-color \
            -out=plan.tfplan \
            2> >(tee /tmp/tflogs/stderr.log >&2)
          code=$?
          echo "Terraform exit code: $code"
          echo "exitcode=$code" >> "$GITHUB_OUTPUT"

          # 如果失败，把首个 Error 段落打印出来再退出
          if [ "$code" -eq 1 ]; then
            echo "::group::🔎 Terraform error details"
            awk 'p;/^Error:/ && ++n==1{p=1} p' /tmp/tflogs/stderr.log | sed -n '1,200p'
            echo "::endgroup::"
            exit 1
          fi
          exit 0

      - name: Who am I (AWS)
        run: aws sts get-caller-identity



      - name: Upload Plan Artifact
        if: ${{ always() && steps.tfplan.outputs.exitcode != '1' }}
        uses: actions/upload-artifact@v4
        with:
          name: pr-plan
          path: envs/dev/plan.out

  main_plan:
    name: Main plan (OIDC)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      - name: Configure AWS via OIDC (apply role)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GHA_APPLY_ROLE_ARN }}   # ← 建议改用 Secret
          aws-region: us-east-1

      - name: Terraform Init
        run: terraform -chdir=envs/dev init

      - name: Terraform Plan
        run: terraform -chdir=envs/dev plan -no-color -var-file=dev.tfvars -out=plan.out

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tf-plan
          path: envs/dev/plan.out

  main_apply:
    name: Main apply (needs approval)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [ main_plan ]
    runs-on: ubuntu-latest
    environment: prod       # ← 这里会触发“环境审批”
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      - name: Configure AWS via OIDC (apply role)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GHA_APPLY_ROLE_ARN }}
          aws-region: us-east-1

      - name: Terraform Init
        run: terraform -chdir=envs/dev init

      - name: Download Plan
        uses: actions/download-artifact@v4
        with:
          name: tf-plan
          path: envs/dev

      - name: Terraform Apply (approved)
        run: terraform -chdir=envs/dev apply -auto-approve plan.out
